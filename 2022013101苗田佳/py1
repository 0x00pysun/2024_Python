import random
import string


class CustomClass:
    def __init__(self, name, number, ID):
        self.name = name
        self.number = number
        self.ID = ID

    def __repr__(self):
        return f'Class name: {self.name}, number: {self.number}, ID: {self.ID}'


example = {
    "data_type": tuple,
    "subs": {
        "sub1": {"data_type": list,
                 "subs": {
                     "sub1": {"data_type": int, "data_range": [100]},
                     "sub2": {"data_type": float, "data_range": (0, 50)},
                     "sub3": {"data_type": str, "data_range": string.ascii_uppercase, "len": 3},
                     "sub4": {"data_type": int, "data_range": [1, 2, 23, 4, 2, 34]},
                 }},
        "sub2": {"data_type": tuple,
                 "subs": {
                     "sub1": {"data_type": int, "data_range": (0, 100)},
                     "sub2": {"data_type": str, "data_range": string.ascii_uppercase, "len": 10},
                     "sub3": {"data_type": str, "data_range": [123123], "len": 10},
                     "sub4": {"data_type": bool, "data_range": []}
                 }},
        "sub3": {"data_type": str, "data_range": "abc", "len": 10},
        "sub4": {"data_type": list,
                 "subs": {
                     "subs": {"data_type": CustomClass,
                              "subs": {
                                  "name": {"data_type": str, "data_range": "2024计算机", "len": 10},
                                  "number": {"data_type": int, "data_range": (0, 100)},
                                  "ID": {"data_type": int, "data_range": (0, 100)}
                              }}
                 }}
    }
}


def generating_data(**kwargs):
    data_type = kwargs.get('data_type')
    data_range = kwargs.get('data_range')
    subs = kwargs.get('subs')
    length = kwargs.get('len')

    def sample_int(data_range):
        return random.randint(0, data_range[0]) if len(data_range) == 1 else random.randint(min(data_range), max(data_range))

    def sample_bool(data_range):
        return random.choice([True, False])

    def sample_float(data_range):
        return round(random.uniform(min(data_range), max(data_range)), 2)

    def sample_str(data_range, length):
        return ''.join(random.choice(data_range) for _ in range(length))

    def sample_collection(col_type, subs):
        return col_type(generating_data(**v) for v in subs.values())

    if data_type is int:
        return sample_int(data_range)
    elif data_type is bool:
        return sample_bool(data_range)
    elif data_type is float:
        return sample_float(data_range)
    elif data_type is str:
        if isinstance(data_range, str):
            return sample_str(data_range, length)
        else:
            return "illegal data range!!! please make sure your input is str!!!"
    elif data_type in [tuple, list, set]:
        return sample_collection(data_type, subs)
    else:
        return data_type(**{k: generating_data(**v) for k, v in subs.items()})


if __name__ == '__main__':
    print(generating_data(**example))

