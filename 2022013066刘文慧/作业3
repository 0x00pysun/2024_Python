import random
import string


def extract_integers(data):
    integers = []
    print(data)
    def _extract_integers(data):
        if isinstance(data, int):
            integers.append(data)
        elif isinstance(data, (list, tuple, set)):
            for item in data:
                _extract_integers(item)
        elif isinstance(data, dict):
            for item in data.values():
                _extract_integers(item)

    _extract_integers(data)
    print(integers)
    return integers


def calculate_data(operation, integers):
    if operation == 'sum':
        result = sum(integers)
    elif operation == 'average':
        result = sum(integers) / len(integers)
    else:
        raise ValueError("Invalid operation. Please choose either 'sum' or 'average'.")

    return result


def data_processor(func):
    def wrapper(operation, **kwargs):
        # Generate random data
        random_data = func(**kwargs)

        # Extract all integers
        integers = extract_integers(random_data)

        # Calculate based on operation
        if operation == 'sum':
            result = calculate_data('sum', integers)
        elif operation == 'average':
            result = calculate_data('average', integers)
        else:
            raise ValueError("Invalid operation. Please choose either 'sum' or 'average'.")

        return result

    return wrapper


def data_sample_inner(**kwargs):
    result = []

    for k, v in kwargs.items():
        if k == 'int':
            range_l, range_r = v['datarange']
            result.append(random.randint(range_l, range_r))
        elif k == 'float':
            range_l, range_r = v['datarange']
            result.append(random.uniform(range_l, range_r))
        elif k == 'str':
            chars = v['datarange']
            str_len = v['len']
            result.append(''.join(random.choice(chars) for _ in range(str_len)))
        elif k in ['tuple', 'list', 'set']:
            tmp = data_sample_inner(**v)
            result.append(tmp)
    return result
@data_processor
def generate_and_process_data(**kwargs):
    num = kwargs.pop('num')
    data = []
    for _ in range(int(num)):
        data.append(data_sample_inner(**kwargs))
    return data


# Call the decorated function for sum
sum_result = generate_and_process_data('sum', num=5, tuple={'int': {'datarange': [1, 10]},
                                                            'list': {'int': {'datarange': [1, 10]},
                                                                     'str': {'datarange': string.ascii_lowercase,
                                                                             'len': 8},
                                                                     'tuple': {
                                                                         'str': {'datarange': string.ascii_lowercase,
                                                                                 'len': 5}}}})
print("Sum:", sum_result)

# Call the decorated function for average
average_result = generate_and_process_data('average', num=5, tuple={'int': {'datarange': [1, 10]},
                                                                    'list': {'int': {'datarange': [1, 10]},
                                                                             'str': {
                                                                                 'datarange': string.ascii_lowercase,
                                                                                 'len': 8},
                                                                             'tuple': {'str': {
                                                                                 'datarange': string.ascii_lowercase,
                                                                                 'len': 5}}}})
print("Average:", average_result)
