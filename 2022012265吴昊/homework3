import random
import string

# 生成随机数据的函数
def generate_random_data(data_struct):
    if 'datatype' not in data_struct:
        raise ValueError("Missing 'datatype' key in data structure definition.")

    datatype = data_struct['datatype']

    if datatype == 'int':
        return random.randint(*data_struct['datarange'])
    elif datatype == 'float':
        return random.uniform(*data_struct['datarange'])
    elif datatype == 'str':
        return ''.join(random.choice(data_struct['datarange']) for _ in range(data_struct['len']))
    elif datatype == 'list':
        return [generate_random_data(sub_struct) for sub_key, sub_struct in data_struct['subs'].items()]
    elif datatype == 'tuple':
        return tuple(generate_random_data(sub_struct) for sub_key, sub_struct in data_struct['subs'].items())
    else:
        raise ValueError(f"Unsupported datatype: {datatype}")

# 收集整数和浮点数的函数
def collect_numbers(data, int_sum=0, float_sum=0):
    if isinstance(data, int):
        int_sum += data
    elif isinstance(data, float):
        float_sum += data
    if isinstance(data, (list, tuple)):
        for item in data:
            int_sum, float_sum = collect_numbers(item, int_sum, float_sum)
    return int_sum, float_sum

# 装饰器函数
def statistics_decorator(func):
    def wrapper(data_struct):
        # 收集统计数据
        int_sum, float_sum = collect_numbers(data_struct)
        int_count = int_sum != 0
        int_average = int_sum / int_count if int_count else 0
        
        # 打印统计结果
        print(f"Sum of int data before: {int_sum}")
        print(f"Sum of float data before: {float_sum}")
        print(f"Average of int data before: {int_average}")
        
        # 调用原始函数生成随机数据
        random_data = func(data_struct)
        
        # 收集生成数据的统计数据
        int_sum_after, float_sum_after = collect_numbers(random_data)
        int_count_after = int_sum_after != 0
        int_average_after = int_sum_after / int_count_after if int_count_after else 0
        
        # 打印统计结果
        print(f"Generated Random Data: {random_data}")
        print(f"Sum of int data after: {int_sum_after}")
        print(f"Sum of float data after: {float_sum_after}")
        print(f"Average of int data after: {int_average_after}")
        
        return random_data
    return wrapper

# 将装饰器应用于 generate_random_data 函数
@statistics_decorator
def generate_random_data_decorated(data_struct):
    return generate_random_data(data_struct)

# 定义数据结构
dataStruct = {
    "datatype": "tuple",
    "subs": {
        "sub1": {
            "datatype": "list",
            "subs": {
                "sub1": {
                    "datatype": "int",
                    "datarange": (0, 100)
                },
                "sub2": {
                    "datatype": "str",
                    "datarange": string.ascii_uppercase,
                    "len": 5
                },
            }
        },
        "sub2": {
            "datatype": "tuple",
            "subs": {
                "sub1": {
                    "datatype": "float",
                    "datarange": (0, 5000)
                },
                "sub2": {
                    "datatype": "int",
                    "datarange": (1, 2000)
                },
            }
        },
        "sub3": {
            "datatype": "str",
            "datarange": string.ascii_uppercase,
            "len": 10
        }
    }
}

# 使用装饰后的函数生成随机数据并打印统计信息
random_data_decorated = generate_random_data_decorated(dataStruct)
